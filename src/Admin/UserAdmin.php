<?php


namespace App\Admin;


use App\Entity\User;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class UserAdmin extends AbstractAdmin
{
    /**
     * @var UserPasswordEncoderInterface
     */
    private $passwordEncoder;
    public function __construct(string $code,
                                string $class,
                                string $baseControllerName,
    UserPasswordEncoderInterface $passwordEncoder
)
    {
        parent::__construct($code, $class, $baseControllerName);
        $this->passwordEncoder=$passwordEncoder;
    }

    protected function configureListFields(ListMapper $list)
    {
        $list
            ->addIdentifier('id')
            ->addIdentifier('email')
            ->addIdentifier('roles')
            ->addIdentifier('firstname')
            ->addIdentifier('lastname')
            ->addIdentifier('address')

        ;
    }

    protected function configureDatagridFilters(DatagridMapper $filter)
    {
        $filter
            ->add('id')
            ->add('email')
            ->add('roles',null, ['template'=>
                    'Admin/users/list.html.twig' ])
            ->add('firstname')
            ->add('lastname')
            ->add('address')
        ;
    }

    /**
     * @param FormMapper $form
     */
    protected function configureFormFields(FormMapper $form)
    {
        $form
            ->add('email')
            ->add('firstname')
            ->add('lastname')
            ->add('plainPassword', TextType::class,  ['required'=>false])
            ->add('address', TextareaType::class,  ['required'=>false])
            ->add('roles',ChoiceType::class, array(
                'choices' => [
                    'Admin' => 'ROLE_ADMIN',
                    'User' => 'ROLE_USER'

                ], 'multiple'=>true,
        'expanded' =>true)
                )
        ;
    }

    /**
     * @param User $object
     */
    public function prePersist($object)
    {
        $this->updatePassword($object); // TODO: Change the autogenerated stub
    }

    /**
     * @param User $object
     */
    public function preUpdate($object)
    {
        $this->updatePassword($object); // TODO: Change the autogenerated stub
    }

   public function updatePassword(User $user)
   {
     if (!$user->getPlainPassword())
    {
      return;
    }
    $hash=$this->passwordEncoder->encodePassword($user, $user->getPlainPassword());
    $user->setPassword($hash);
    }

}